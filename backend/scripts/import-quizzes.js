const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
const { Quiz } = require('../models/Quiz');

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/autistudy';

async function importQuizzes() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('‚úÖ Connexion √† MongoDB √©tablie');

    // Lire le fichier JSON des quiz
    const quizDataPath = path.join(__dirname, '../../frontend/autistudy_quizzes_52.json');
    
    if (!fs.existsSync(quizDataPath)) {
      throw new Error(`Fichier non trouv√©: ${quizDataPath}`);
    }

    const quizData = JSON.parse(fs.readFileSync(quizDataPath, 'utf8'));
    console.log(`üìö ${quizData.length} quiz trouv√©s dans le fichier`);

    // Supprimer les quiz existants (optionnel)
    const existingQuizzes = await Quiz.countDocuments();
    if (existingQuizzes > 0) {
      console.log(`üóëÔ∏è Suppression de ${existingQuizzes} quiz existants...`);
      await Quiz.deleteMany({});
    }

    // Transformer les donn√©es pour correspondre au sch√©ma
    const quizzesToImport = quizData.map(quiz => {
      const transformedQuestions = quiz.questions.map(question => ({
        id: question.id,
        subject: question.subject,
        question: question.question,
        options: question.options,
        answer: question.answer,
        difficulty: getDifficulty(question.subject, question.question),
        ageRange: {
          min: 6,
          max: 18
        },
        imageUrl: null,
        explanation: getExplanation(question.subject, question.answer)
      }));

      return {
        week: quiz.week,
        title: quiz.title,
        description: generateDescription(quiz.week),
        questions: transformedQuestions,
        isActive: true,
        createdBy: null // Pas d'utilisateur sp√©cifique pour l'import
      };
    });

    // Ins√©rer les quiz dans la base de donn√©es
    console.log('üíæ Insertion des quiz dans la base de donn√©es...');
    const result = await Quiz.insertMany(quizzesToImport);
    
    console.log(`‚úÖ ${result.length} quiz import√©s avec succ√®s !`);
    
    // Afficher quelques statistiques
    const stats = await Quiz.getQuizStats();
    console.log('\nüìä Statistiques:');
    console.log(`- Total des quiz: ${stats[0]?.totalQuizzes || 0}`);
    console.log(`- Total des questions: ${stats[0]?.totalQuestions || 0}`);
    console.log(`- Moyenne de questions par quiz: ${Math.round(stats[0]?.averageQuestionsPerQuiz || 0)}`);

    // Afficher la r√©partition par mati√®re
    const subjectStats = await Quiz.aggregate([
      { $match: { isActive: true } },
      { $unwind: '$questions' },
      { $group: { _id: '$questions.subject', count: { $sum: 1 } } },
      { $sort: { count: -1 } }
    ]);

    console.log('\nüìö R√©partition par mati√®re:');
    subjectStats.forEach(stat => {
      console.log(`- ${stat._id}: ${stat.count} questions`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'importation:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå Connexion √† MongoDB ferm√©e');
  }
}

// Fonction pour d√©terminer la difficult√© bas√©e sur la mati√®re et la question
function getDifficulty(subject, question) {
  const questionLower = question.toLowerCase();
  
  // Questions faciles (vocabulaire de base, calculs simples)
  if (
    subject === 'Math√©matiques' && (
      questionLower.includes('combien font') ||
      questionLower.includes('plus grand') ||
      questionLower.includes('addition')
    )
  ) {
    return 'facile';
  }
  
  if (
    subject === 'Fran√ßais' && (
      questionLower.includes('trouve le verbe') ||
      questionLower.includes('quel mot est un animal')
    )
  ) {
    return 'facile';
  }
  
  // Questions moyennes (concepts plus complexes)
  if (
    subject === 'Sciences' ||
    subject === 'Histoire' ||
    subject === 'G√©ographie'
  ) {
    return 'moyen';
  }
  
  // Questions difficiles (Arts, Musique avec concepts sp√©cialis√©s)
  if (subject === 'Arts' || subject === 'Musique') {
    return 'difficile';
  }
  
  return 'facile'; // Par d√©faut
}

// Fonction pour g√©n√©rer des explications basiques
function getExplanation(subject, answer) {
  const explanations = {
    'Math√©matiques': `La r√©ponse est ${answer}. En math√©matiques, il est important de v√©rifier ses calculs.`,
    'Fran√ßais': `La bonne r√©ponse est "${answer}". En fran√ßais, il faut identifier la nature des mots.`,
    'Sciences': `La r√©ponse correcte est "${answer}". Les sciences nous aident √† comprendre le monde qui nous entoure.`,
    'Histoire': `La r√©ponse est "${answer}". L'histoire nous apprend sur le pass√© de l'humanit√©.`,
    'G√©ographie': `La bonne r√©ponse est "${answer}". La g√©ographie √©tudie la Terre et ses habitants.`,
    'Arts': `La r√©ponse est "${answer}". L'art est une expression de la cr√©ativit√© humaine.`,
    'Musique': `La bonne r√©ponse est "${answer}". La musique est un langage universel.`
  };
  
  return explanations[subject] || `La r√©ponse correcte est "${answer}".`;
}

// Fonction pour g√©n√©rer des descriptions
function generateDescription(week) {
  const descriptions = [
    "Quiz de r√©vision des notions de base",
    "Exercices de consolidation des acquis",
    "√âvaluation des connaissances fondamentales",
    "Test de compr√©hension et d'application",
    "Quiz de r√©vision et de progression"
  ];
  
  return descriptions[week % descriptions.length];
}

// Ex√©cuter l'import si le script est appel√© directement
if (require.main === module) {
  importQuizzes();
}

module.exports = { importQuizzes };

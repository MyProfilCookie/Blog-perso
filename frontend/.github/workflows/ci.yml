name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Job de test et qualit√© du code
  test:
    name: Tests and Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run Prettier check
        run: |
          cd frontend
          npm run format:check

      - name: Run type checking
        run: |
          cd frontend
          npm run type-check

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:ci

      - name: Run integration tests
        run: |
          cd frontend
          npm run test:integration

      - name: Generate test coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Run build tests
        run: |
          cd frontend
          npm run test:build

  # Job de s√©curit√©
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run security audit
        run: |
          cd frontend
          npm audit --audit-level=high

      - name: Run dependency check
        uses: actions/dependency-check-action@main
        with:
          project: 'AutiStudy'
          path: './frontend'
          format: 'ALL'

  # Job de performance
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './frontend/lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job de d√©ploiement en staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://staging.autistudy.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for staging
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: staging

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--env NEXT_PUBLIC_API_URL=${{ secrets.STAGING_API_URL }}'

      - name: Run smoke tests
        run: |
          cd frontend
          npm run test:smoke
        env:
          TEST_URL: https://staging.autistudy.com

  # Job de d√©ploiement en production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, performance]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://autistudy.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build for production
        run: |
          cd frontend
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod --env NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}'

      - name: Deploy backend to server
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/autistudy/backend
            git pull origin main
            npm ci --only=production
            pm2 restart autistudy-api
            pm2 save

      - name: Run production smoke tests
        run: |
          cd frontend
          npm run test:smoke
        env:
          TEST_URL: https://autistudy.com

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ D√©ploiement en production r√©ussi!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job de notification en cas d'√©chec
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [test, security, performance, deploy-staging, deploy-production]
    if: failure()
    
    steps:
      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ùå √âchec du pipeline CI/CD'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job de nettoyage
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: Clean up artifacts
        run: |
          echo "Nettoyage des artefacts temporaires..."
          # Commandes de nettoyage si n√©cessaire
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest) {
  try {
    const { prompt } = await request.json();

    if (!prompt || typeof prompt !== "string") {
      return NextResponse.json(
        { error: "Le prompt est requis et doit √™tre une cha√Æne de caract√®res" },
        { status: 400 }
      );
    }

    // Utiliser l'API Groq (gratuite et rapide) si disponible, sinon simulation
    const apiKey = process.env.GROQ_API_KEY;
    
    // Debug logs
    console.log("GROQ_API_KEY pr√©sente:", !!apiKey);
    console.log("Longueur de la cl√©:", apiKey?.length || 0);
    
    if (apiKey) {
      try {
        const groqResponse = await fetch("https://api.groq.com/openai/v1/chat/completions", {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${apiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "llama-3.3-70b-versatile",
            messages: [
              {
                role: "system",
                content: "Tu es Alia, une assistante IA bienveillante et encourageante pour AutiStudy, une plateforme d'apprentissage pour enfants autistes. Tu es enthousiaste, patiente et utilises parfois des emojis pour rendre la conversation plus chaleureuse. R√©ponds de mani√®re claire, simple et structur√©e. Utilise des listes √† puces si n√©cessaire. Sois toujours positive et encourage l'utilisateur. R√©ponds en fran√ßais."
              },
              {
                role: "user",
                content: prompt
              }
            ],
            temperature: 0.7,
            max_tokens: 500,
          }),
        });

        if (groqResponse.ok) {
          const data = await groqResponse.json();
          const reply = data.choices?.[0]?.message?.content || "";
          
          console.log("‚úÖ R√©ponse Groq r√©ussie");
          
          return NextResponse.json({
            reply: reply,
            timestamp: new Date().toISOString(),
            source: "groq"
          });
        } else {
          console.error("‚ùå Groq API erreur HTTP:", groqResponse.status, await groqResponse.text());
        }
      } catch (groqError) {
        console.error("‚ùå Erreur Groq API:", groqError);
        // Continue avec la simulation en cas d'erreur
      }
    } else {
      console.log("‚ö†Ô∏è Aucune cl√© API Groq trouv√©e, utilisation de la simulation");
    }

    // Simulation de r√©ponse IA (fallback)
    const aiResponses = [
      "üéì Excellente question ! Pour mieux apprendre, je te conseille de diviser tes sessions d'√©tude en petits blocs de 25 minutes avec des pauses. C'est ce qu'on appelle la technique Pomodoro ! üçÖ",
      "üí° Voici quelques astuces : \n1. Cr√©e des fiches r√©sum√©es color√©es üåà\n2. Explique ce que tu apprends √† quelqu'un d'autre üë•\n3. Utilise des mn√©moniques pour m√©moriser üß†\n4. Pratique r√©guli√®rement plut√¥t que de r√©viser au dernier moment ‚è∞",
      "üöÄ AutiStudy est une plateforme √©ducative sp√©cialement con√ßue pour rendre l'apprentissage accessible et agr√©able pour tous les enfants, notamment ceux avec autisme. Nous proposons des ressources, des outils et un accompagnement personnalis√© !",
      "üìö C'est une super question ! L'important est de trouver la m√©thode qui te convient le mieux. Chaque personne apprend diff√©remment, et c'est tout √† fait normal ! üåü",
      "‚ú® Je suis l√† pour t'aider ! N'h√©site pas √† me poser d'autres questions. Ensemble, on va rendre l'apprentissage plus fun et efficace ! üí™",
      "üéØ Pour mieux comprendre un concept difficile, essaie de le dessiner ou de cr√©er un sch√©ma. Les repr√©sentations visuelles aident √©norm√©ment le cerveau √† int√©grer l'information ! üé®",
      "üåü Super initiative de vouloir am√©liorer tes m√©thodes d'apprentissage ! La cl√©, c'est la r√©gularit√© et la patience. Chaque petit progr√®s compte ! üéâ",
      "üß© Si tu rencontres des difficult√©s, d√©compose le probl√®me en petites parties. C'est comme un puzzle : on avance pi√®ce par pi√®ce ! Et n'oublie pas de c√©l√©brer tes r√©ussites ! üéä",
    ];

    // Analyse basique du prompt pour choisir une r√©ponse appropri√©e
    const lowerPrompt = prompt.toLowerCase();
    let response = "";

    if (lowerPrompt.includes("apprendre") || lowerPrompt.includes("apprentissage")) {
      response = aiResponses[0];
    } else if (lowerPrompt.includes("astuce") || lowerPrompt.includes("conseil")) {
      response = aiResponses[1];
    } else if (lowerPrompt.includes("autistudy") || lowerPrompt.includes("plateforme")) {
      response = aiResponses[2];
    } else if (lowerPrompt.includes("difficile") || lowerPrompt.includes("probl√®me")) {
      response = aiResponses[7];
    } else if (lowerPrompt.includes("m√©thode") || lowerPrompt.includes("technique")) {
      response = aiResponses[6];
    } else {
      // R√©ponse al√©atoire parmi les r√©ponses g√©n√©riques
      const genericResponses = [aiResponses[3], aiResponses[4], aiResponses[5]];
      response = genericResponses[Math.floor(Math.random() * genericResponses.length)];
    }

    // Simuler un d√©lai de traitement pour rendre l'exp√©rience plus r√©aliste
    await new Promise((resolve) => setTimeout(resolve, 500));

    return NextResponse.json({
      reply: response,
      timestamp: new Date().toISOString(),
      source: "simulation"
    });
  } catch (error) {
    console.error("Erreur dans l'API chat:", error);
    return NextResponse.json(
      { error: "Erreur lors du traitement de la demande" },
      { status: 500 }
    );
  }
}

// M√©thode GET pour v√©rifier que l'API fonctionne
export async function GET() {
  return NextResponse.json({
    message: "API Chat AutiStudy - Utilisez POST avec un 'prompt' dans le body",
    status: "online",
    version: "1.0.0",
  });
}

